
abstract module Organ(super.length) extends M(length)
{	
	int rank;				// phytomer rank
	int cpn;				// cumulative phytomer number
	int order;				// order (0 = main stem)
	double age;				// organ age (dd)	
	
	
	// calculate age for EACH organ
	void calcAge() 
	{	
			age++;
	}	
}


module Seed extends Null
{
	double diameter;
	double 	age;
		
	boolean shouldInit()
	{
		if(age > 1)
		{
			return true;
		} else
		{
			return false;
		}
	}	
}
==> Sphere(diameter).(setShader(YELLOW))
;


module Roots extends Organ
{
	double depth;
	double radius;	
	
	void initiate(){
	
		age = 0;
		depth = 0.05;
		radius = 0.05;
		length = 0;
	
	}
	
	void getDepth(){
	
		depth = Math.min(age * 0.1,0.5);
		radius = Math.min(age * 0.1,0.5);
		
	}
	
}
//==> Translate(0,0,-depth) Box(depth,radius,radius).(setShader(WHITE))
;

module Apex extends Organ
{		
	double diameter;	
	double plas = 1;
	
	boolean shouldProduce()
	{
		if(age > (rank * plas))
		{
			return true;
		} else
		{
			return false;
		}
	}
	
	void increment(){
	rank = rank +1;
	}
	
	void initiate(){
				
		age		= 0;
		order	= 0;
		diameter = 0.015;
		
	}
	
	void initiateAxillary(Apex a){
		
		rank	= a.rank;
		age		= 0;
		order	= a.order+1;
		diameter = 0.01;
		
	}
	
}
==> Sphere(diameter).(setShader(RED))
;

module Internode extends Organ//extends Cylinder.(setShader(YELLOW))
{
	
	double diam;
	double am 	= 30;
	double lm 	= 0.15;
	double k	= 0.25;
	
	void initiate(Apex a){
		
		age = 0;
		rank = a.rank;
		order = a.order;
		length = 0;
		diam = a.diameter;
		
	}	
	
	void Growth(){
		
		
		length = lm / (1 + Math.exp(-k*(age-am))); 
	}
	
	
}
==> Cylinder(length,diam).(setShader(YELLOW))
;


module NodeInt extends Organ
{
	double diameter;
	
	void initiate(Apex a){
		
		diameter = a.diameter;
		rank = a.rank;
		order = a.order;
		age = 0;
		length = 0.01;
		
	}
	
	void getDiameter(Internode i){
		
		diameter = i.diam;
	}
}
==> Cylinder(length,diameter).(setShader(BLACK))
;

module Leaf extends Organ
{
	
	int w_ratio = 2;
	double lm = 0.5;
	double blade_len;
	double width;
	double thickness;
	double petlength;
	double petdiameter;
	double leafangle;
	
	void initiate(Apex a){
	
		age = 0;
		rank = a.rank;
		order = a.order;
		thickness = 0.001;
		length = 0;
		width = 0;
		
		petdiameter = a.diameter + thickness * 2;
		
		
	}
	
	void Growth()
	{
		double am 	= 10;
		double k	= 0.25;
		
		length = lm / (1 + Math.exp(-k*(age-am)));
		blade_len = length;
		
		width = length / w_ratio;
		
		Internode it = selectWhere((*i:Internode*), i.rank == rank);		
		petdiameter = (it.diam) +0.002;		
		petlength = it.lm  * 1.1;
		
		double k_angle	= 0.25;
		double am_angle	= 10;
		double max_angle = 60;
		leafangle  = max_angle / (1 + Math.exp(-k_angle*(age-am_angle))); 
		
	}		
	
}
==> Cylinder(petlength, (petdiameter/2)+0.01).(setShader(GREEN)) RL(leafangle) Box(blade_len, width, thickness).(setShader(GREEN))
;


protected void init()
[
	Axiom ==> 	
	
	s:Seed
	{
		s.diameter	= 0.005;
		s.age 		= 0.0;
	};
]




public void run()
{	
[
	// Seed Germination
	s:Seed, (s.shouldInit()) 
	==> r:Roots a:Apex 
	{
		r.initiate(); 
		a.initiate();
	};
	
	// Produce vegetative phytometer
	a:Apex, (a.shouldProduce() == true && a.order ==0)
	==>  n:NodeInt [RL(90) b:Apex] [RH(180) l:Leaf] i:Internode RH(180) a
	{
		n.initiate(a);
			b.initiateAxillary(a);
			l.initiate(a);
		i.initiate(a);
		a.increment();		
		
	};
	
	s:Seed ::>
	{
		s.age++;
	}
	
	r:Roots ::>
	{
		r.getDepth();
		r.age++;
	}
	
	// adding/changing attributes to created objetcs
	a:Apex ::> 
	{
		a.age++;		
	}
	
	i:Internode ::> 
	{
		i.age++;		
		i.Growth();	
		
	}
	
	l:Leaf ::> 
	{
		l.age++;
		l.Growth();	
		
	}
	
	l:Leaf, (l.age > 20) ==>> ; 

]

 
 
 	 


}
